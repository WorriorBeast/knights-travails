{"version":3,"file":"main.a786b8d729b6a71e547f.js","mappings":"mBAGA,MAAMA,EAAU,ICHhB,MACC,WAAAC,GACCC,KAAKC,cAAgB,CACpB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,EAAE,EAAG,GACL,EAAE,GAAI,GACN,EAAE,GAAI,GACN,CAAC,GAAI,GACL,CAAC,GAAI,GAEP,CAEA,aAAAC,CAAcC,EAAGC,GAChB,OAAOD,EAAI,GAAKA,GAAK,GAAKC,EAAI,GAAKA,GAAK,CACzC,CAEA,YAAAC,CAAaC,EAAOC,GACnB,IAAKP,KAAKE,cAAcI,EAAM,GAAIA,EAAM,IAAK,OAAQ,EAErD,MAAME,EAAQ,CAAC,CAAEF,QAAOG,KAAM,CAACH,GAAQI,MAAO,IACxCC,EAAU,IAAIC,IAMpB,IAFAD,EAAQE,IAAIP,EAAMQ,YAEXN,EAAMO,QAAQ,CACpB,MAAQT,MAAOU,EAAe,KAAEP,EAAI,MAAEC,GAAUF,EAAMS,SAC/Cd,EAAGC,GAAKY,EAEf,GAAIb,IAAMI,EATC,IASmBH,IAAMG,EARtB,GASb,MAAO,kBAAkBG,8BAAkCD,EAAKS,KAC9DC,GACO,IAAIA,SAKd,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,KAAKC,cAAcc,OAAQK,IAAK,CACnD,MAAMC,EAAWlB,EAAIH,KAAKC,cAAcmB,GAlB9B,GAmBJE,EAAWlB,EAAIJ,KAAKC,cAAcmB,GAlB3B,GAmBPG,EAAkB,CAACF,EAAUC,GAGlCtB,KAAKE,cAAcmB,EAAUC,KAC5BX,EAAQa,IAAID,EAAgBT,cAE7BN,EAAMiB,KAAK,CACVnB,MAAOiB,EACPd,KAAM,IAAIA,EAAMc,GAChBb,MAAOA,EAAQ,IAEhBC,EAAQE,IAAIU,EAAgBT,YAE9B,CACD,CAEA,OAAQ,CACT,GDvDDY,QAAQC,IAAI7B,EAAQO,aAAa,EAAE,EAAG,GAAI,CAAC,EAAG,KAK9CqB,QAAQC,IAAI7B,EAAQO,aAAa,CAAC,EAAG,GAAI,CAAC,EAAG,KAK7CqB,QAAQC,IAAI7B,EAAQO,aAAa,CAAC,EAAG,GAAI,CAAC,EAAG,KAK7CqB,QAAQC,IAAI7B,EAAQO,aAAa,CAAC,EAAG,GAAI,CAAC,EAAG,I","sources":["webpack://knights-travails/./src/index.js","webpack://knights-travails/./src/knight-travails.js"],"sourcesContent":["//import './style.css';\nimport { Knight } from './knight-travails';\n\nconst knight1 = new Knight();\n\nconsole.log(knight1.shortestPath([-2, 0], [0, 0]));\n/*\nExpected output: -1;\n*/\n\nconsole.log(knight1.shortestPath([0, 0], [3, 3]));\n/* \nExpected output: You made it in 2 moves! Here's your path: [0,0],[1,2],[3,3]\n*/\n\nconsole.log(knight1.shortestPath([3, 3], [0, 0]));\n/*\nExpected output: You made it in 2 moves! Here's your path: [3,3],[2,1],[0,0]\n*/\n\nconsole.log(knight1.shortestPath([0, 0], [7, 7]));\n\n/*\nExpected output: You made it in 6 moves! Here's your path: [0,0],[1,2],[2,4],[3,6],[5,7],[6,5],[7,7]\n*/\n","class Knight {\n\tconstructor() {\n\t\tthis.possibleMoves = [\n\t\t\t[1, 2],\n\t\t\t[2, 1],\n\t\t\t[-1, 2],\n\t\t\t[-2, 1],\n\t\t\t[-1, -2],\n\t\t\t[-2, -1],\n\t\t\t[1, -2],\n\t\t\t[2, -1],\n\t\t];\n\t}\n\n\tisWithinBoard(x, y) {\n\t\treturn x < 8 && x >= 0 && y < 8 && y >= 0;\n\t}\n\n\tshortestPath(start, destination) {\n\t\tif (!this.isWithinBoard(start[0], start[1])) return -1;\n\n\t\tconst queue = [{ start, path: [start], moves: 0 }];\n\t\tconst visited = new Set();\n\t\tconst ROW = 0;\n\t\tconst COLUMN = 1;\n\n\t\tvisited.add(start.toString());\n\n\t\twhile (queue.length) {\n\t\t\tconst { start: currentPosition, path, moves } = queue.shift();\n\t\t\tconst [x, y] = currentPosition;\n\n\t\t\tif (x === destination[ROW] && y === destination[COLUMN]) {\n\t\t\t\treturn `You made it in ${moves} moves! Here's your path: ${path.map(\n\t\t\t\t\t(location) => {\n\t\t\t\t\t\treturn `[${location}]`;\n\t\t\t\t\t},\n\t\t\t\t)}`;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < this.possibleMoves.length; i++) {\n\t\t\t\tconst updatedX = x + this.possibleMoves[i][ROW];\n\t\t\t\tconst updatedY = y + this.possibleMoves[i][COLUMN];\n\t\t\t\tconst updatedPosition = [updatedX, updatedY];\n\n\t\t\t\tif (\n\t\t\t\t\tthis.isWithinBoard(updatedX, updatedY) &&\n\t\t\t\t\t!visited.has(updatedPosition.toString())\n\t\t\t\t) {\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\tstart: updatedPosition,\n\t\t\t\t\t\tpath: [...path, updatedPosition],\n\t\t\t\t\t\tmoves: moves + 1,\n\t\t\t\t\t});\n\t\t\t\t\tvisited.add(updatedPosition.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n}\n\nexport { Knight };\n"],"names":["knight1","constructor","this","possibleMoves","isWithinBoard","x","y","shortestPath","start","destination","queue","path","moves","visited","Set","add","toString","length","currentPosition","shift","map","location","i","updatedX","updatedY","updatedPosition","has","push","console","log"],"sourceRoot":""}